#!/usr/bin/env python
#-*- coding: utf-8 -*-
"""
Lambiesta Maker - Gerador de vídeo padrão com audio cortado
de vários tipos de fontes: youtube, flv, mp3
"""
import os
import re
import urllib2
from optparse import OptionParser


def main():
    """Função principal responsável por receber e tratar as entradas
    do programa"""
    usage = """%prog -[m|f|y] [audio|video|link] start_time video_out.flv
    %prog --help ,para ver as opcoes"""
    parser = OptionParser(usage=usage)
    parser.add_option("-f", "--flv",
                        help="video flv de entrada", metavar="FILE")
    parser.add_option("-m", "--mp3",
                        help="audio mp3 de entrada", metavar="FILE")
    parser.add_option("-y", "--youtube",
                        help="youtube link de entrada", metavar="LINK")

    (options, args) = parser.parse_args()

    if len(args) != 2:
        parser.error('Número de parâmetros inválidos')

    inputs_type = [v for v in options.__dict__.values() if v]
    if len(inputs_type) > 1:
        parser.error("Opções --mp3,--flv,--youtube use-as separadas")

    if len(inputs_type) == 0:
        parser.error("Use no mínimo uma opção: --mp3 | --flv | --youtube")

    try:
        start_time = int(args[0])
    except ValueError:
        parser.error('o segundo parâmetro deve ser o tempo em segundos(int)')

    type_in = [k for k in options.__dict__.keys() if options.__dict__.get(k)][0]
    source = inputs_type[0]
    if type_in == 'youtube':
        try:
            source = re.findall(r'v=(\w+)', source)[0]
        except IndexError:
            parser.error('%s - não é uma url válida do youtube' % source)
    else:
        if not os.path.exists(source):
            parser.error('%s - arquivo não encontrado' % source)

    video_out = args[1]
    return source, type_in, start_time, video_out


def get_youtube(id_video, file_name):
    """Função resonsável pelo download do vídeo no youtube
    id_video - string - parâmetro v do vídeo no youtube
    file_name - string - nome do arquivo que será salvo o vídeo"""
    print 'Pegando o link do video.'
    page = urllib2.urlopen('http://www.youtube.com/watch?v=' + id_video)
    texto = page.readlines()
    for line in texto:
        if 'SWF_ARGS' in line:
            swf_args = line.split('"')
            break

    video_id = swf_args[swf_args.index('video_id') + 2]
    parm_t =  swf_args[swf_args.index('t') + 2]

    print "Fazendo download..."

    file_down = urllib2.urlopen(
                        'http://www.youtube.com/get_video?video_id=%s&t=%s'
                        % (video_id, parm_t)
                ).readlines()

    file_save = open(file_name,'wb')
    file_save.writelines(file_down)
    file_save.close()

    print "Download concluído."



def make_lambiesta(source, type_in, start_time, video_out):
    """Função responsável por fazer a montagem do vídeo.
    source - string - fonte do audio do vídeo a ser gerado
    type_in - string - flv | mp3 | youtube
    start_time - int - segundo inicial onde o audio deve ser cortado
    video_out - string - nome do arquivo final a ser gerado"""
    if type_in in ['flv', 'youtube']:
        extract_sound = 'output.mp3'
    #definindo a mp3 de entrada
    if type_in == 'mp3':
        sound_in = source
    elif type_in == 'flv':
        #convertendo flv -> mp3
        os.system(
            'ffmpeg -i %s -ar 44100 -ab 160k -ac 2 %s'
            % (source, extract_sound)
        )
        sound_in = extract_sound
    elif type_in == 'youtube':
        flv_video = 'video_down.flv'
        get_youtube(source, flv_video)
        #convertendo flv -> mp3
        os.system(
            'ffmpeg -i %s -ar 44100 -ab 160k -ac 2 %s'
            % (flv_video, extract_sound)
        )
        sound_in = extract_sound

    #fazendo corte no audio
    crop_sound = 'outputfile.mp3'
    os.system(
        'ffmpeg -ss %d -t 23 -acodec copy -i %s %s'
        % (start_time, sound_in, crop_sound)
    )
    #juntando audio com vídeo padrão
    os.system(
        'mencoder -ovc copy -audiofile %s -oac copy video_nosound.flv -o %s'
        % (crop_sound , video_out)
    )
    os.system('rm %s' % crop_sound)
    if type_in in ['flv', 'youtube']:
        os.system('rm output.mp3')
    if type_in == 'youtube':
        os.system('rm %s' % flv_video)


if __name__ == '__main__':
    data_input = main()
    make_lambiesta(*data_input)
